// Generated by CoffeeScript 1.4.0
(function() {
  var draw;

  draw = function(data) {
    var a, activity, borderColor, borderHilit, borderWidth, darkGray, fig, h, headHeight, hlineColor, hlineWidth, i, keynoteColor, lightGray, maxTime, minTime, nDays, needs_endlabel, pad, partyColor, pink, purple, rectLeft, rectw, scienceColor, svg, textColor, thickBorderWidth, tickWidth, totalh, totalw, vlightGray, w, yScale, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    w = 798;
    h = 850;
    pad = {
      left: 50,
      top: 10,
      right: 10,
      bottom: 20,
      rect: 50
    };
    tickWidth = 4;
    totalw = w + pad.left + pad.right;
    totalh = h + pad.top + pad.bottom;
    vlightGray = "#EEE";
    lightGray = "#CCC";
    darkGray = "#AAA";
    pink = "#E9CFEC";
    purple = "#8C4374";
    borderColor = "black";
    hlineColor = "black";
    textColor = "black";
    borderWidth = 1;
    thickBorderWidth = 4;
    borderHilit = d3.rgb(0, 0, 128);
    hlineWidth = 1;
    headHeight = 50;
    scienceColor = d3.rgb(201, 255, 255);
    keynoteColor = d3.rgb(121, 255, 255);
    partyColor = d3.rgb(255, 201, 237);
    nDays = data.days.length;
    rectw = (w - pad.rect * (nDays - 1)) / nDays;
    rectLeft = (function() {
      var _results;
      _results = [];
      for (i in data.days) {
        _results.push(i * (rectw + pad.rect));
      }
      return _results;
    })();
    svg = d3.select("div#figure").append("svg").attr("width", totalw).attr("height", totalh);
    fig = svg.append("g").attr("id", "program").attr("transform", "translate(" + pad.left + "," + pad.top + ")");
    minTime = 24;
    maxTime = 0;
    _ref = data.activities;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      activity = _ref[_i];
      if (activity.startnum < minTime) {
        minTime = activity.startnum;
      }
      if (activity.endnum > maxTime) {
        maxTime = activity.endnum;
      }
    }
    yScale = d3.scale.linear().domain([minTime, maxTime]).range([headHeight, h]);
    fig.selectAll("empty").data(data.days).enter().append("a").attr("xlink:href", function(d, i) {
      return "program_" + data.sdays[i] + ".html";
    }).append("rect").attr("x", function(d, i) {
      return rectLeft[i];
    }).attr("y", 0).attr("height", h).attr("width", rectw).attr("stroke", borderColor).attr("fill", vlightGray).attr("stroke-width", borderWidth).on("mouseover", function(d, i) {
      return d3.selectAll("rect#border" + i).attr("stroke-width", thickBorderWidth).attr("stroke", borderHilit);
    }).on("mouseout", function(d, i) {
      return d3.selectAll("rect#border" + i).attr("stroke-width", borderWidth).attr("stroke", borderColor);
    }).on("click", function(d, i) {
      return d3.selectAll("rect#border" + i).attr("stroke-width", borderWidth).attr("stroke", borderColor);
    });
    fig.selectAll("empty").data(data.days).enter().append("rect").attr("x", function(d, i) {
      return rectLeft[i];
    }).attr("y", 0).attr("height", headHeight).attr("width", rectw).attr("stroke", borderColor).attr("fill", darkGray).attr("stroke-width", borderWidth).attr("id", function(d, i) {
      return "headrect" + i;
    }).style("pointer-events", "none");
    fig.selectAll("empty").data(data.days).enter().append("text").text(function(d) {
      return d;
    }).attr("x", function(d, i) {
      return rectLeft[i] + rectw / 2;
    }).attr("y", headHeight / 2).attr("fill", textColor).attr("dominant-baseline", "middle").attr("text-anchor", "middle").attr("id", function(d, i) {
      return "headtext" + i;
    }).style("font-size", "0.8em").style("pointer-events", "none");
    fig.selectAll("empty").data(data.activities).enter().append("rect").attr("x", function(d) {
      return rectLeft[d.day];
    }).attr("width", rectw).attr("y", function(d) {
      return yScale(d.startnum);
    }).attr("height", function(d) {
      return yScale(d.endnum) - yScale(d.startnum);
    }).attr("stroke", borderColor).attr("stroke-width", borderWidth).attr("fill", function(d) {
      if (d.type === "science") {
        return scienceColor;
      }
      if (d.type === "keynote") {
        return keynoteColor;
      }
      if (d.type === "party") {
        return partyColor;
      }
      return lightGray;
    }).style("pointer-events", "none");
    fig.selectAll("empty").data(data.activities).enter().append("text").text(function(d) {
      return d.activity;
    }).attr("x", function(d) {
      return rectLeft[d.day] + rectw / 2;
    }).attr("y", function(d) {
      return (yScale(d.endnum) + yScale(d.startnum)) / 2;
    }).attr("fill", textColor).attr("dominant-baseline", "middle").attr("text-anchor", "middle").style("font-size", "0.75em").style("pointer-events", "none");
    _ref1 = data.activities;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      a = _ref1[_j];
      if (a.start === "12:00") {
        a.start = "noon";
      }
      if (a.end === "12:00") {
        a.end = "noon";
      }
    }
    fig.selectAll("empty").data(data.activities).enter().append("text").text(function(d) {
      return d.start;
    }).attr("y", function(d) {
      return yScale(d.startnum);
    }).attr("x", function(d) {
      return rectLeft[d.day] - tickWidth * 2;
    }).attr("fill", textColor).attr("dominant-baseline", "middle").attr("text-anchor", "end").style("font-size", "0.7em").style("pointer-events", "none");
    fig.selectAll("empty").data(data.activities).enter().append("line").attr("y1", function(d) {
      return yScale(d.startnum);
    }).attr("y2", function(d) {
      return yScale(d.startnum);
    }).attr("x1", function(d) {
      return rectLeft[d.day] - tickWidth;
    }).attr("x2", function(d) {
      return rectLeft[d.day];
    }).attr("stroke", hlineColor).attr("stroke-width", hlineWidth).style("pointer-events", "none");
    needs_endlabel = [];
    _ref2 = data.activities;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      a = _ref2[_k];
      if (a.activity === "Reception" || a.activity === "Social night out" || a.activity === "Session 5" || a.activity === "Posters (odd #\u2019s)") {
        needs_endlabel.push(a);
      }
    }
    fig.selectAll("empty").data(needs_endlabel).enter().append("text").text(function(d) {
      return d.end;
    }).attr("y", function(d) {
      return yScale(d.endnum);
    }).attr("x", function(d) {
      return rectLeft[d.day] - tickWidth * 2;
    }).attr("fill", textColor).attr("dominant-baseline", "middle").attr("text-anchor", "end").style("font-size", "0.7em").style("pointer-events", "none");
    fig.selectAll("empty").data(needs_endlabel).enter().append("line").attr("y1", function(d) {
      return yScale(d.endnum);
    }).attr("y2", function(d) {
      return yScale(d.endnum);
    }).attr("x1", function(d) {
      return rectLeft[d.day] - tickWidth;
    }).attr("x2", function(d) {
      return rectLeft[d.day];
    }).attr("stroke", hlineColor).attr("stroke-width", hlineWidth).style("pointer-events", "none");
    return fig.selectAll("empty").data(data.days).enter().append("rect").attr("x", function(d, i) {
      return rectLeft[i];
    }).attr("y", 0).attr("height", h).attr("width", rectw).attr("stroke", borderColor).attr("fill", "none").attr("stroke-width", borderWidth).attr("id", function(d, i) {
      return "border" + i;
    }).style("pointer-events", "none");
  };

  d3.json("programvis/schedule.json", draw);

}).call(this);
